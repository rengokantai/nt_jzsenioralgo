Binary Tree Flipping
```
public class BinaryTreeFlipping{
  TreeNode newRoot;
  
  void dfs(TreeNode cur){
    if(cur.left!=null){
      dfs(cur.left);
      cur.left.right=cur;
      cur.left.left=cur.right;
      cur.left=null;
      cur.right=null;
    }
    else{
      newRoot=cur;
    }
  }
  
  public TreeNode upsideDownBinaryTree(TreeNode root){
    if(root==null){
      return null;
    }
    dfs(root);
    return newRoot;
  }
}

```

lc366 	
Find Leaves of Binary Tree  
```
public class Solution {
  HashMap<Integer,List<Integer>> depth = new HashMap<>();
  int max_depth;
  
  int dfs(TreeNode cur){
    if(cur==null){
      return 0;
    }
    int d = Math.max(dfs(cur.left),dfs(cur.right))+1;
    max_depth = Math.max(max_depth,d);
    if(!depth.containsKey(d)){
      depth.put(d, new ArrayList<Integer>());
    }
    depth.get(d).add(cur.val);
    return d;
  }
  public List<List<Integer>> findLeaves(TreeNode root){
    List<List<Integer>> ans = new ArrayList<>();
    max_depth=0;
    dfs(root);
    for(int i=1;i<=max.length;i++){
      ans.add(depth.get(i));
    }
    return ans;
  }
}
```

lc314	
Binary Tree Vertical Order Traversal    
```
public class Solution {
  public List<List<Integer>> verticalOrder(TreeNode root){
    List<List<Integer>> ans = new ArrayList<>();
    if(root==null){
      return ans;
    }
    int col_min=0;
    int col_max=0;
    HashMap<Integer, List<Integer>> col = new HashMap<>();
    Queue<Integer> q1 = new LinkedList<>(); //record column
    Queue<TreeNode> q2=new LinkedList<>(); //record node
    q1.add(0);
    q2.add(root);
    while(!q1.isEmpty()){
      int c = q1.poll();
      TreeNode node=q2.poll();
      if(!col.containsKey(c)){
        col.put(c,new ArrayList<Integer>());
      }
      col.get(c).add(node.val);
      col_min=Math.min(col_min,c);
      col_max=Math.max(col_max,c);
      
      if(node.left!=null){
        q1.add(c-1);
        q2.add(node.left);
      }
      if(node.right!=null){
        q1.add(c-1);
        q2.add(node.right);
      }
      for(int 1=col_min;i<=col_max;i++){
        ans.add(col.get(i));
      }
      return ans;
    }
  }
}
```
lc285	
Inorder Successor in BST
```
public class Solution {
  public TreeNode inorderSuccessor(TreeNode root, TreeNode p){
    if(root==null||p==null){
      return null;
    }
    TreeNode ans = null,cur=root;
    while(cur!=p){
      if(p.val<cur.val){
        ans=cur;
        cur=cur.left;
      }
      if(p.val>cur.val){
        cur=cur.right;
      }
    }
    
    if(p.right!=null){
      cur=p.right;
      while(cur.left!=null){
        cur=cur.left;
      }
      ans=cur;
    }
    return ans;
  }
}
```
